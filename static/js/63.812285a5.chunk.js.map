{"version":3,"file":"static/js/63.812285a5.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.jsx","components/Contactform/ContactFormStyles.js","components/Contactform/FormFormik.js","components/Contactform/Contactform.jsx","components/Pages/Contacts.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts, removeContact } from '../../redux/contacts/ContactThunks';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector((state) => state.contacts.contacts);\n  const isLoading = useSelector((state) => state.contacts.isLoading);\n  const error = useSelector((state) => state.contacts.error);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const handleDeleteContact = (contactId) => {\n    dispatch(removeContact(contactId));\n  };\n\n  if (isLoading) {\n    return <div>Loading...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  return (\n    <div>\n      <h2>Contact List</h2>\n      {contacts.length === 0 ? (\n        <p>No contacts found.</p>\n      ) : (\n        <ul>\n          {contacts.map((contact) => (\n            <li key={contact.id}>\n              {contact.name} ({contact.email})\n              <button onClick={() => handleDeleteContact(contact.id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default ContactList;\n","import { Field, ErrorMessage } from 'formik';\nimport styled from '@emotion/styled';\n\nexport const FormContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  color: black;\n  font-size: 20px;\n  text-align: center;\n`;\n\nexport const Input = styled(Field)`\n  padding: 10px;\n  margin-top: 5px;\n  border: 2px solid #ccc;\n  border-radius: 4px;\n  font-size: 20px;\n`;\n\nexport const ErrorMsg = styled(ErrorMessage)`\n  color: red;\n  margin-top: 5px;\n  font-size: 14px;\n`;\n\nexport const Button = styled.button`\n  padding: 10px 20px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  font-size: 16px;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n\n","import React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { FormContainer, Label, Input, ErrorMsg, Button } from './ContactFormStyles';\n\nconst FormFormik = ({ onSubmit }) => {\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().required('Required'),\n    number: yup\n      .number()\n      .min(6, 'Too Short!')\n      .positive()\n      .required('Required'),\n  });\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={schema}\n    >\n      <Form>\n        <FormContainer>\n          <Label htmlFor=\"name\">\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ErrorMsg name=\"name\" component=\"div\" />\n          </Label>\n          <Label htmlFor=\"number\">\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMsg name=\"number\" component=\"div\" />\n          </Label>\n          <Button type=\"submit\">Add contact</Button>\n        </FormContainer>\n      </Form>\n    </Formik>\n  );\n}\n\nexport default FormFormik;","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormFormik from './FormFormik';\n\nimport { toast } from 'react-toastify';\nimport { createContact } from 'redux/contacts/ContactThunks';\n\nexport default function ContactForm() {\n  const contacts = useSelector(state => state.contacts.contacts); // Оновлено\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const newContact = {\n      name,\n      number,\n    };\n    const normalizedContact = newContact.name.toLowerCase().trim();\n    const normalizedNumber = newContact.number.replaceAll(' ', '');\n\n    if (\n      contacts.some(el => el.name.toLowerCase().trim() === normalizedContact)\n    ) {\n      toast.warning(\n        `The contact name ${normalizedContact} already exists!`\n      );\n      return;\n    }\n\n    if (\n      contacts.some(el => el.number.replaceAll(' ', '') === normalizedNumber)\n    ) {\n      toast.warning(\n        `The contact number ${normalizedNumber} already exists!`\n      );\n      return;\n    }\n\n    dispatch(createContact(newContact));\n\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <FormFormik onSubmit={handleFormSubmit} />\n    </>\n  );\n}\n","import { Filter } from '@mui/icons-material'\nimport ContactList from 'components/ContactList/ContactList'\nimport ContactForm from 'components/Contactform/Contactform'\nimport React from 'react'\n\nconst Contacts = () => {\n  return (\n    <div>\n          <ContactForm></ContactForm>\n          <ContactList></ContactList>\n          <Filter></Filter>\n    </div>\n  )\n}\n\nexport default Contacts\n"],"names":["dispatch","useDispatch","contacts","useSelector","state","isLoading","error","useEffect","fetchContacts","message","length","map","contact","name","email","onClick","contactId","id","removeContact","FormContainer","styled","Label","Input","Field","ErrorMsg","ErrorMessage","Button","onSubmit","schema","yup","shape","required","number","min","positive","initialValues","validationSchema","htmlFor","type","title","component","ContactForm","useState","setName","setNumber","reset","e","preventDefault","newContact","normalizedContact","toLowerCase","trim","normalizedNumber","replaceAll","some","el","toast","createContact","Filter"],"sourceRoot":""}